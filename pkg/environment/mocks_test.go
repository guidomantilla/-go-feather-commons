// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/environment/types.go

// Package environment is a generated GoMock package.
package environment

import (
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
	properties "github.com/guidomantilla/go-feather-commons/pkg/properties"
)

func TestNewMockEnvironment(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *MockEnvironment
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewMockEnvironment(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockEnvironment() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironment_EXPECT(t *testing.T) {
	tests := []struct {
		name string
		m    *MockEnvironment
		want *MockEnvironmentMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironment.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironment_AppendPropertySources(t *testing.T) {
	type args struct {
		propertySources []properties.PropertySource
	}
	tests := []struct {
		name string
		m    *MockEnvironment
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.AppendPropertySources(tt.args.propertySources...)
		})
	}
}

func TestMockEnvironmentMockRecorder_AppendPropertySources(t *testing.T) {
	type args struct {
		propertySources []interface{}
	}
	tests := []struct {
		name string
		mr   *MockEnvironmentMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.AppendPropertySources(tt.args.propertySources...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironmentMockRecorder.AppendPropertySources() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironment_GetPropertySources(t *testing.T) {
	tests := []struct {
		name string
		m    *MockEnvironment
		want []properties.PropertySource
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.GetPropertySources(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironment.GetPropertySources() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironmentMockRecorder_GetPropertySources(t *testing.T) {
	tests := []struct {
		name string
		mr   *MockEnvironmentMockRecorder
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetPropertySources(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironmentMockRecorder.GetPropertySources() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironment_GetValue(t *testing.T) {
	type args struct {
		property string
	}
	tests := []struct {
		name string
		m    *MockEnvironment
		args args
		want EnvVar
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.GetValue(tt.args.property); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironment.GetValue() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironmentMockRecorder_GetValue(t *testing.T) {
	type args struct {
		property interface{}
	}
	tests := []struct {
		name string
		mr   *MockEnvironmentMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetValue(tt.args.property); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironmentMockRecorder.GetValue() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironment_GetValueOrDefault(t *testing.T) {
	type args struct {
		property     string
		defaultValue string
	}
	tests := []struct {
		name string
		m    *MockEnvironment
		args args
		want EnvVar
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.GetValueOrDefault(tt.args.property, tt.args.defaultValue); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironment.GetValueOrDefault() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockEnvironmentMockRecorder_GetValueOrDefault(t *testing.T) {
	type args struct {
		property     interface{}
		defaultValue interface{}
	}
	tests := []struct {
		name string
		mr   *MockEnvironmentMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetValueOrDefault(tt.args.property, tt.args.defaultValue); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockEnvironmentMockRecorder.GetValueOrDefault() = %v, want %v", got, tt.want)
			}
		})
	}
}
