// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sethvargo/go-envconfig (interfaces: Lookuper)

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
)

func TestNewMockLookuper(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *MockLookuper
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewMockLookuper(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockLookuper() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLookuper_EXPECT(t *testing.T) {
	tests := []struct {
		name string
		m    *MockLookuper
		want *MockLookuperMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLookuper.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLookuper_Lookup(t *testing.T) {
	type args struct {
		arg0 string
	}
	tests := []struct {
		name  string
		m     *MockLookuper
		args  args
		want  string
		want1 bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1 := tt.m.Lookup(tt.args.arg0)
			if got != tt.want {
				t.Errorf("MockLookuper.Lookup() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.want1 {
				t.Errorf("MockLookuper.Lookup() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestMockLookuperMockRecorder_Lookup(t *testing.T) {
	type args struct {
		arg0 interface{}
	}
	tests := []struct {
		name string
		mr   *MockLookuperMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.Lookup(tt.args.arg0); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLookuperMockRecorder.Lookup() = %v, want %v", got, tt.want)
			}
		})
	}
}
